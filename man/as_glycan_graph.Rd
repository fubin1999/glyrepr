% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as-glycan-graph.R
\name{as_glycan_graph}
\alias{as_glycan_graph}
\alias{as_dn_glycan_graph}
\alias{as_ne_glycan_graph}
\title{Convert igraph Graph to Glycan Graph}
\usage{
as_glycan_graph(graph, type = "auto")

as_dn_glycan_graph(graph)

as_ne_glycan_graph(graph)
}
\arguments{
\item{graph}{An igraph graph object.}

\item{type}{A character string specifying the glycan graph type.
It can be "auto", "ne", or "dn".
If "auto" (the default), the function tries to infer the type,
and raises an error if it cannot.
If "ne" or "dn", the function assumes the graph is of the specified type.}
}
\value{
A glycan graph object.
}
\description{
A glycan graph is a subclass of igraph graph with additional constraints.
This function checks these constraints and append the S3 class \code{glycan_graph}
to the graph object.

Generally, \strong{it is not recommended} to create a glycan graph using this
function manually.
Use the \href{https://github.com/fubin1999/glyparse}{glyparse} package
to generate a glycan graph from a structure string.

Two types of glycan graphs are supported: dual-node (DN) and node-edge (NE).
A NE glycan graph is a directed modeling of a glycan structure,
where nodes are monosaccharides and edges are linkages.
A DN glycan graph is another way to model a glycan structure,
where both monosaccharides and linkages are nodes.
Monosaccharides and linkages alternate in a DN glycan graph.
For more details, see "details" section.

\code{as_dn_glycan_graph()} is the same as \code{as_glycan_graph()} with \code{type = "dn"}.
\code{as_ne_glycan_graph()} is the same as \code{as_glycan_graph()} with \code{type = "ne"}.
}
\section{S3 Classes}{
A glycan graph is merely an igraph graph with an additional S3 class \code{glycan_graph}.
Based on type of the glycan, \code{ne_glycan_graph} or \code{dn_glycan_graph} is also
appended to the graph.
Therefore, \code{sloop::s3_class()} of a glycan graph is either
\code{c("ne_glycan_graph", "glycan_graph", "igraph")} or
\code{c("dn_glycan_graph", "glycan_graph", "igraph")}.
}

\section{Node-Edge (NE) Glycan Graph}{
This is the most intuitive way to model a glycan structure.
Nodes represent monosaccharides and edges represent linkages.

Constraints:
\itemize{
\item The graph must be directed and an outward tree (reducing end as root).
\item The graph must have a graph attribute \code{anomer}, in the form of "a1".
\item The graph must have a graph attribute \code{alditol}, a logical value.
\item The graph must have a vertex attribute \code{mono} for monosaccharide names.
\item The graph must have a vertex attribute \code{sub} for substituents.
\item The graph must have an edge attribute \code{linkage} for linkages.
\item Monosaccharide name must be known, either generic (Hex, HexNAc, etc.)
or concrete (Glc, Gal, etc.), but not a mixture of both.
NA is not allowed.
\item Substituent must be valid, in the form of "xY", where x is position
and Y is substituent name, e.g. "2Ac", "3S", etc.
\item Linkages must be valid, in the form of "a/bX-Y", where X and Y are integers,
e.g. "b1-4", "a2-3", etc.
NA is not allowed.
}
}

\section{Dual-Node (DN) Glycan Graph}{
This is another way to model a glycan structure.
In this mode, both monosaccharides and linkages are nodes,
and they alternate in the graph to represent the structure.
Python library \code{glycowork} and \code{glypy} use this model.
It is not that intuitive, but allows a more flexible motif matching.

Constraints:
\itemize{
\item The graph must be directed and an outward tree (reducing end as root).
\item The graph must have a graph attribute \code{anomer}, in the form of "a1".
\item The graph must have a graph attribute \code{alditol}, a logical value.
\item The graph must have vertex attributes \code{type}, \code{mono}, \code{sub}, and \code{linkage}.
\code{type} should be either "mono" or "linkage".
NA is not allowed for \code{type}.
\code{mono} and \code{linkage} are monosaccharide name and linkage, respectively.
For nodes with \code{type = "mono"}, \code{linkage} is always NA.
For nodes with \code{type = "linkage"}, \code{mono} and \code{sub} are always NA.
\item Monosaccharide name must be known, either generic or concrete, but not a mixture of both.
For nodes with \code{type = "mono"}, NA is not allowed for \code{mono}.
\item Substituent must be valid.
For nodes with \code{type = "mono"}, NA is not allowed for \code{sub}.
\item Linkages must be valid.
For nodes with \code{type = "linkage"}, NA is not allowed for \code{linkage}.
\item \code{mono} nodes and \code{linkage} nodes must alternate in the graph.
In another word, each edge must connect a \code{mono} node and a \code{linkage} node.
\item The outermost nodes (nodes with out-degree 0) must be \code{mono} nodes,
not \code{linkage} nodes.
}
}

\examples{
library(igraph)

# A simple NE glycan graph: GlcNAc(b1-4)GlcNAc
graph <- make_graph(~ 1-+2)  # 1 and 2 are monosaccharides
V(graph)$mono <- c("GlcNAc", "GlcNAc")
V(graph)$sub <- ""
E(graph)$linkage <- "b1-4"
graph$anomer <- "a1"
as_glycan_graph(graph)

# A simple DN glycan graph: GlcNAc(b1-4)GlcNAc
graph <- make_graph(~ 1-+2, 2-+3)  # 1 and 3 are monosaccharides, 2 is linkage
V(graph)$type <- c("mono", "linkage", "mono")
V(graph)$mono <- c("GlcNAc", NA, "GlcNAc")
V(graph)$sub <- c("", NA, "")
V(graph)$linkage <- c(NA, "b1-4", NA)
graph$anomer <- "a1"
as_glycan_graph(graph, type = "dn")

}
